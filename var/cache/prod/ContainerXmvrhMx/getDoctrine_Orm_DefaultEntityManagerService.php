<?php

namespace ContainerXmvrhMx;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManager_9a5be93', function () use ($container) {
                return \EntityManager_9a5be93::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = self::do($container, false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $b->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 4).'/src/Entity')], false), 'App\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity']);
        $a->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $a->setQueryCache(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $a->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService')));
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setSchemaIgnoreClasses([]);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setTypedFieldMapper(new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper());
        $a->setEntityListenerResolver(($container->services['doctrine.orm.default_entity_listener_resolver'] ?? $container->load('getDoctrine_Orm_DefaultEntityListenerResolverService')));
        $a->setLazyGhostObjectEnabled(false);
        $a->setIdentityGenerationPreferences([]);
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\AbonnementRepository' => ['privates', 'App\\Repository\\AbonnementRepository', 'getAbonnementRepositoryService', true],
            'App\\Repository\\ChannelRepository' => ['privates', 'App\\Repository\\ChannelRepository', 'getChannelRepositoryService', true],
            'App\\Repository\\ChatMessageRepository' => ['privates', 'App\\Repository\\ChatMessageRepository', 'getChatMessageRepositoryService', true],
            'App\\Repository\\DepartementRepository' => ['privates', 'App\\Repository\\DepartementRepository', 'getDepartementRepositoryService', true],
            'App\\Repository\\ExtTranslationWpCommentMetaRepository' => ['privates', 'App\\Repository\\ExtTranslationWpCommentMetaRepository', 'getExtTranslationWpCommentMetaRepositoryService', true],
            'App\\Repository\\ExtTranslationWpCommentsRepository' => ['privates', 'App\\Repository\\ExtTranslationWpCommentsRepository', 'getExtTranslationWpCommentsRepositoryService', true],
            'App\\Repository\\ExtTranslationWpOptionsRepository' => ['privates', 'App\\Repository\\ExtTranslationWpOptionsRepository', 'getExtTranslationWpOptionsRepositoryService', true],
            'App\\Repository\\ExtTranslationWpPostmetaRepository' => ['privates', 'App\\Repository\\ExtTranslationWpPostmetaRepository', 'getExtTranslationWpPostmetaRepositoryService', true],
            'App\\Repository\\ExtTranslationWpPostsRepository' => ['privates', 'App\\Repository\\ExtTranslationWpPostsRepository', 'getExtTranslationWpPostsRepositoryService', true],
            'App\\Repository\\ExtTranslationWpTermTaxonomyRepository' => ['privates', 'App\\Repository\\ExtTranslationWpTermTaxonomyRepository', 'getExtTranslationWpTermTaxonomyRepositoryService', true],
            'App\\Repository\\ExtTranslationWpTermsRepository' => ['privates', 'App\\Repository\\ExtTranslationWpTermsRepository', 'getExtTranslationWpTermsRepositoryService', true],
            'App\\Repository\\ExtTranslationWpUsermetaRepository' => ['privates', 'App\\Repository\\ExtTranslationWpUsermetaRepository', 'getExtTranslationWpUsermetaRepositoryService', true],
            'App\\Repository\\InformationsFacturationUtilisateurRepository' => ['privates', 'App\\Repository\\InformationsFacturationUtilisateurRepository', 'getInformationsFacturationUtilisateurRepositoryService', true],
            'App\\Repository\\MessageRepository' => ['privates', 'App\\Repository\\MessageRepository', 'getMessageRepositoryService', true],
            'App\\Repository\\NewsletterRepository' => ['privates', 'App\\Repository\\NewsletterRepository', 'getNewsletterRepositoryService', true],
            'App\\Repository\\OffreInterneRepository' => ['privates', 'App\\Repository\\OffreInterneRepository', 'getOffreInterneRepositoryService', true],
            'App\\Repository\\ResetPasswordRequestRepository' => ['privates', 'App\\Repository\\ResetPasswordRequestRepository', 'getResetPasswordRequestRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
            'App\\Repository\\UserUniqueDataRepository' => ['privates', 'App\\Repository\\UserUniqueDataRepository', 'getUserUniqueDataRepositoryService', true],
            'App\\Repository\\WpCommentmetaRepository' => ['privates', 'App\\Repository\\WpCommentmetaRepository', 'getWpCommentmetaRepositoryService', true],
            'App\\Repository\\WpCommentsRepository' => ['privates', 'App\\Repository\\WpCommentsRepository', 'getWpCommentsRepositoryService', true],
            'App\\Repository\\WpOptionsRepository' => ['privates', 'App\\Repository\\WpOptionsRepository', 'getWpOptionsRepositoryService', true],
            'App\\Repository\\WpPostmetaRepository' => ['privates', 'App\\Repository\\WpPostmetaRepository', 'getWpPostmetaRepositoryService', true],
            'App\\Repository\\WpPostsRepository' => ['privates', 'App\\Repository\\WpPostsRepository', 'getWpPostsRepositoryService', true],
            'App\\Repository\\WpTermRelationshipsRepository' => ['privates', 'App\\Repository\\WpTermRelationshipsRepository', 'getWpTermRelationshipsRepositoryService', true],
            'App\\Repository\\WpTermTaxonomyRepository' => ['privates', 'App\\Repository\\WpTermTaxonomyRepository', 'getWpTermTaxonomyRepositoryService', true],
            'App\\Repository\\WpTermmetaRepository' => ['privates', 'App\\Repository\\WpTermmetaRepository', 'getWpTermmetaRepositoryService', true],
            'App\\Repository\\WpTermsRepository' => ['privates', 'App\\Repository\\WpTermsRepository', 'getWpTermsRepositoryService', true],
            'App\\Repository\\WpTransactionsRepository' => ['privates', 'App\\Repository\\WpTransactionsRepository', 'getWpTransactionsRepositoryService', true],
            'App\\Repository\\WpUsermetaRepository' => ['privates', 'App\\Repository\\WpUsermetaRepository', 'getWpUsermetaRepositoryService', true],
        ], [
            'App\\Repository\\AbonnementRepository' => '?',
            'App\\Repository\\ChannelRepository' => '?',
            'App\\Repository\\ChatMessageRepository' => '?',
            'App\\Repository\\DepartementRepository' => '?',
            'App\\Repository\\ExtTranslationWpCommentMetaRepository' => '?',
            'App\\Repository\\ExtTranslationWpCommentsRepository' => '?',
            'App\\Repository\\ExtTranslationWpOptionsRepository' => '?',
            'App\\Repository\\ExtTranslationWpPostmetaRepository' => '?',
            'App\\Repository\\ExtTranslationWpPostsRepository' => '?',
            'App\\Repository\\ExtTranslationWpTermTaxonomyRepository' => '?',
            'App\\Repository\\ExtTranslationWpTermsRepository' => '?',
            'App\\Repository\\ExtTranslationWpUsermetaRepository' => '?',
            'App\\Repository\\InformationsFacturationUtilisateurRepository' => '?',
            'App\\Repository\\MessageRepository' => '?',
            'App\\Repository\\NewsletterRepository' => '?',
            'App\\Repository\\OffreInterneRepository' => '?',
            'App\\Repository\\ResetPasswordRequestRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
            'App\\Repository\\UserUniqueDataRepository' => '?',
            'App\\Repository\\WpCommentmetaRepository' => '?',
            'App\\Repository\\WpCommentsRepository' => '?',
            'App\\Repository\\WpOptionsRepository' => '?',
            'App\\Repository\\WpPostmetaRepository' => '?',
            'App\\Repository\\WpPostsRepository' => '?',
            'App\\Repository\\WpTermRelationshipsRepository' => '?',
            'App\\Repository\\WpTermTaxonomyRepository' => '?',
            'App\\Repository\\WpTermmetaRepository' => '?',
            'App\\Repository\\WpTermsRepository' => '?',
            'App\\Repository\\WpTransactionsRepository' => '?',
            'App\\Repository\\WpUsermetaRepository' => '?',
        ])));

        $instance = new \Doctrine\ORM\EntityManager(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a, ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? $container->load('getDoctrine_Dbal_DefaultConnection_EventManagerService')));

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
