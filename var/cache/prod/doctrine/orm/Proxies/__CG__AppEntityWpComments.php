<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WpComments extends \App\Entity\WpComments implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentId', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentPostId', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthor', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthorEmail', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthorUrl', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthorIp', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentDate', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentDateGmt', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentContent', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentKarma', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentApproved', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAgent', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentType', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentParent', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'userId', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'extTranslationWpComments'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentId', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentPostId', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthor', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthorEmail', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthorUrl', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAuthorIp', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentDate', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentDateGmt', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentContent', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentKarma', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentApproved', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentAgent', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentType', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'commentParent', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'userId', '' . "\0" . 'App\\Entity\\WpComments' . "\0" . 'extTranslationWpComments'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WpComments $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getCommentId(): ?string
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getCommentId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentId', []);

        return parent::getCommentId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentPostId(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentPostId', []);

        return parent::getCommentPostId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentPostId(string $commentPostId): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentPostId', [$commentPostId]);

        return parent::setCommentPostId($commentPostId);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentAuthor(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentAuthor', []);

        return parent::getCommentAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentAuthor(string $commentAuthor): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentAuthor', [$commentAuthor]);

        return parent::setCommentAuthor($commentAuthor);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentAuthorEmail(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentAuthorEmail', []);

        return parent::getCommentAuthorEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentAuthorEmail(string $commentAuthorEmail): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentAuthorEmail', [$commentAuthorEmail]);

        return parent::setCommentAuthorEmail($commentAuthorEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentAuthorUrl(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentAuthorUrl', []);

        return parent::getCommentAuthorUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentAuthorUrl(string $commentAuthorUrl): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentAuthorUrl', [$commentAuthorUrl]);

        return parent::setCommentAuthorUrl($commentAuthorUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentAuthorIp(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentAuthorIp', []);

        return parent::getCommentAuthorIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentAuthorIp(string $commentAuthorIp): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentAuthorIp', [$commentAuthorIp]);

        return parent::setCommentAuthorIp($commentAuthorIp);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentDate', []);

        return parent::getCommentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentDate(\DateTime $commentDate): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentDate', [$commentDate]);

        return parent::setCommentDate($commentDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentDateGmt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentDateGmt', []);

        return parent::getCommentDateGmt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentDateGmt(\DateTime $commentDateGmt): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentDateGmt', [$commentDateGmt]);

        return parent::setCommentDateGmt($commentDateGmt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentContent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentContent', []);

        return parent::getCommentContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentContent(string $commentContent): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentContent', [$commentContent]);

        return parent::setCommentContent($commentContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentKarma(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentKarma', []);

        return parent::getCommentKarma();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentKarma(int $commentKarma): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentKarma', [$commentKarma]);

        return parent::setCommentKarma($commentKarma);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentApproved(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentApproved', []);

        return parent::getCommentApproved();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentApproved(string $commentApproved): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentApproved', [$commentApproved]);

        return parent::setCommentApproved($commentApproved);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentAgent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentAgent', []);

        return parent::getCommentAgent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentAgent(string $commentAgent): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentAgent', [$commentAgent]);

        return parent::setCommentAgent($commentAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentType', []);

        return parent::getCommentType();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentType(string $commentType): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentType', [$commentType]);

        return parent::setCommentType($commentType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentParent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentParent', []);

        return parent::getCommentParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentParent(string $commentParent): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentParent', [$commentParent]);

        return parent::setCommentParent($commentParent);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', []);

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId(string $userId): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', [$userId]);

        return parent::setUserId($userId);
    }

    /**
     * {@inheritDoc}
     */
    public function getPost(): ?\App\Entity\WpPosts
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPost', []);

        return parent::getPost();
    }

    /**
     * {@inheritDoc}
     */
    public function setPost(?\App\Entity\WpPosts $post): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPost', [$post]);

        return parent::setPost($post);
    }

    /**
     * {@inheritDoc}
     */
    public function setTranslatableLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTranslatableLocale', [$locale]);

        return parent::setTranslatableLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtTranslationWpComments(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtTranslationWpComments', []);

        return parent::getExtTranslationWpComments();
    }

    /**
     * {@inheritDoc}
     */
    public function addExtTranslationWpComment(\App\Entity\ExtTranslationWpComments $extTranslationWpComment): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addExtTranslationWpComment', [$extTranslationWpComment]);

        return parent::addExtTranslationWpComment($extTranslationWpComment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeExtTranslationWpComment(\App\Entity\ExtTranslationWpComments $extTranslationWpComment): \App\Entity\WpComments
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeExtTranslationWpComment', [$extTranslationWpComment]);

        return parent::removeExtTranslationWpComment($extTranslationWpComment);
    }

}
