<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WpTerms extends \App\Entity\WpTerms implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termId', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'name', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'slug', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termGroup', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termPrice', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termIcon', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'extTranslationWpTerms', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'wpTermTaxonomies'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termId', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'name', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'slug', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termGroup', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termPrice', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'termIcon', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'extTranslationWpTerms', '' . "\0" . 'App\\Entity\\WpTerms' . "\0" . 'wpTermTaxonomies'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WpTerms $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTermId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getTermId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTermId', []);

        return parent::getTermId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug(string $slug): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getTermGroup(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTermGroup', []);

        return parent::getTermGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function setTermGroup(string $termGroup): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTermGroup', [$termGroup]);

        return parent::setTermGroup($termGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getTermPrice(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTermPrice', []);

        return parent::getTermPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setTermPrice(string $termPrice): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTermPrice', [$termPrice]);

        return parent::setTermPrice($termPrice);
    }

    /**
     * {@inheritDoc}
     */
    public function getTermIcon(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTermIcon', []);

        return parent::getTermIcon();
    }

    /**
     * {@inheritDoc}
     */
    public function setTermIcon(string $termIcon): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTermIcon', [$termIcon]);

        return parent::setTermIcon($termIcon);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtTranslationWpTerms(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtTranslationWpTerms', []);

        return parent::getExtTranslationWpTerms();
    }

    /**
     * {@inheritDoc}
     */
    public function addExtTranslationWpTerm(\App\Entity\ExtTranslationWpTerms $extTranslationWpTerm): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addExtTranslationWpTerm', [$extTranslationWpTerm]);

        return parent::addExtTranslationWpTerm($extTranslationWpTerm);
    }

    /**
     * {@inheritDoc}
     */
    public function removeExtTranslationWpTerm(\App\Entity\ExtTranslationWpTerms $extTranslationWpTerm): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeExtTranslationWpTerm', [$extTranslationWpTerm]);

        return parent::removeExtTranslationWpTerm($extTranslationWpTerm);
    }

    /**
     * {@inheritDoc}
     */
    public function getWpTermTaxonomies(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWpTermTaxonomies', []);

        return parent::getWpTermTaxonomies();
    }

    /**
     * {@inheritDoc}
     */
    public function addWpTermTaxonomy(\App\Entity\WpTermTaxonomy $wpTermTaxonomy): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWpTermTaxonomy', [$wpTermTaxonomy]);

        return parent::addWpTermTaxonomy($wpTermTaxonomy);
    }

    /**
     * {@inheritDoc}
     */
    public function removeWpTermTaxonomy(\App\Entity\WpTermTaxonomy $wpTermTaxonomy): \App\Entity\WpTerms
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeWpTermTaxonomy', [$wpTermTaxonomy]);

        return parent::removeWpTermTaxonomy($wpTermTaxonomy);
    }

}
