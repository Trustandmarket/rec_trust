<?php

namespace Container6fg1Euc;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityListenerResolverService extends App_KernelRecDebugContainer
{
    /**
     * Gets the public 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/src/Mapping/EntityListenerResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Mapping/EntityListenerServiceResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/src/Mapping/ContainerEntityListenerResolver.php';

        $container->services['doctrine.orm.default_entity_listener_resolver'] = $instance = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\EventListener\\AbonnementPrePersist' => ['privates', 'App\\EventListener\\AbonnementPrePersist', 'getAbonnementPrePersistService', true],
            'App\\EventListener\\DepartementPreRemove' => ['privates', 'App\\EventListener\\DepartementPreRemove', 'getDepartementPreRemoveService', true],
            'App\\EventListener\\UserPreUpdate' => ['privates', 'App\\EventListener\\UserPreUpdate', 'getUserPreUpdateService', true],
        ], [
            'App\\EventListener\\AbonnementPrePersist' => '?',
            'App\\EventListener\\DepartementPreRemove' => '?',
            'App\\EventListener\\UserPreUpdate' => '?',
        ]));

        $instance->registerService('App\\EventListener\\AbonnementPrePersist', 'App\\EventListener\\AbonnementPrePersist');
        $instance->registerService('App\\EventListener\\DepartementPreRemove', 'App\\EventListener\\DepartementPreRemove');
        $instance->registerService('App\\EventListener\\UserPreUpdate', 'App\\EventListener\\UserPreUpdate');

        return $instance;
    }
}
