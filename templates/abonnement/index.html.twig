{% extends 'otherLayout.html.twig' %}

{% block head %}
    {{ parent() }}
    <link rel="icon" href="{{ preload(asset('assets/img/favicon/cropped-cropped-logo-trust-and-market-32x32.png')) }}"
          sizes="32x32"/>
    <link rel="icon" href="{{ preload(asset('assets/img/favicon/cropped-cropped-logo-trust-and-market-192x192.png')) }}"
          sizes="192x192"/>
    <link rel="apple-touch-icon-precomposed"
          href="{{ preload(asset('assets/img/favicon/cropped-cropped-logo-trust-and-market-180x180.png')) }}"/>
    <meta name="msapplication-TileImage"
          content="{{ preload(asset('assets/img/favicon/cropped-cropped-logo-trust-and-market-270x270.png')) }}"/>
    <meta name="title"
          content="Trust &amp; Market | {{ include('Seo/Meta/title.html.twig', {code: 'page-abonnement'}) }}">
    <meta name="description"
          content="{{ include('Seo/Meta/description.html.twig', {code: 'page-abonnement'}) }}">
    <link rel="canonical" href="{{ absolute_url(path('app_abonnement')) }}">
    <link rel="shortlink" href="{{ path('app_abonnement') }}">
    {# OG CONTENT #}
    <meta property="og:title"
          content="Trust &amp; Market |	{{ include('Seo/Meta/title.html.twig', {code: 'page-abonnement'}) }}">
    <meta property="og:description"
          content="{{ include('Seo/Meta/description.html.twig', {code: 'page-abonnement'}) }}">
    <meta property="og:image"
          content="{{ asset('assets/img/favicon/cropped-cropped-logo-trust-and-market-270x270.png') }}">
    <meta propery="og:type" content="website">
    {# END OG CONTENT #}
{% endblock %}

{% block title %}
    Trust &amp; Market | {{ include('Seo/Meta/title.html.twig', {code: 'page-abonnement'}) }}
{% endblock %}

{% block style %}
    {{ parent() }}

    <!-- Gijgo datepicker css -->
    <link rel="stylesheet" href=" {{ asset('assets/css/gijgo-css/gijgo.min.css') }}">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css"/>
    <link rel="stylesheet" href="{{ asset('toastr/toastr.min.css') }}">
    <!-- Custom css for camroll -->
    <link href="{{ asset('assets/css/camroll/camroll_slider.css') }}" rel="stylesheet" type="text/css">
    <link href="{{ asset('assets/css/custome.css') }}" rel="stylesheet">
    <link href="{{ asset('assets/css/mon-profil.css') }}" rel="stylesheet" type="text/css">
    <!-- owl carousel css -->
    <link rel="stylesheet" type="text/css"
          href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
    <link rel="stylesheet" type="text/css"
          href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">
    <link href="{{ asset('assets/css/card-js.min.css') }}" rel="stylesheet" type="text/css"/>
    <style>

        .pagination .page-item.active .page-link {
            background-color: #f17b30;
        }

        .abbo-bloc {
            border-color: #ff7e10 !important;
            border-radius: 10px;
            margin: 10px 1px 10px 1px;
            padding-bottom: 0.5rem;
        }

        .rounded {
            border-radius: 1rem !important;
        }

        .btn-abbo {
            border-radius: 1rem;
            background: #008779;
            font-size: medium !important;
            font-weight: bold;
            color: #fff;
        }

        .btn-abbo a {
            color: #fff;
            font-size: medium;
        }

        .table-success-perso {
            color: #fff;
            background: #008779;
        }

        .card[class*=border] {
            border: 2px solid #9e9e9e;
            box-shadow: none;
        }

        h {
            text-decoration-line: underline;
        }

        .form-control {
            border-radius: 25px;
        }

        .card-footer .btn-primary {
            border-radius: 25px;
            background: #008779 !important;
        }

        .secure-message {
            color: #008779;
        }

        .card-number, .expiry, .cvc {
            border-radius: 15px !important;
        }

        .container {
            position: relative;
        }

        .vertical-center {
            margin-top: 4rem;

        }

        .card-js .icon {
            top: 5px;
        }

        table.table td, table.table th {
            font-size: medium;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        .save {
            animation: fadeIn 0.5s ease-in-out;
        }

        /* For Desktop View */
        @media screen and (min-width: 1024px) {
            #dialoguons {
                width: 19%;
            }
        }

        /* For Tablet View */
        @media screen and (min-device-width: 768px)
        and (max-device-width: 1024px) {
            #dialoguons {
                width: 30%;
            }

            .playVideoButton {
                width: 70px !important;
                height: 70px !important;
            }

            .vertical-center {
                margin-top: 5rem;
            }
        }

        /* For Mobile Portrait View */
        @media screen and (max-device-width: 480px)
        and (orientation: portrait) {
            #dialoguons {
                width: 70%;
            }

            .playVideoButton {
                width: 50px !important;
                height: 50px !important;
            }

            .vertical-center {
                margin-top: 4rem;
            }

            h1 {
                font-size: xx-large;
            }
        }

        /* For Mobile Landscape View */
        @media screen and (max-device-width: 640px)
        and (orientation: landscape) {
            #dialoguons {
                width: 40%;
            }

            .playVideoButton {
                width: 50px !important;
                height: 50px !important;
            }
        }

        /* For Mobile Phones Portrait or Landscape View */
        @media screen and (max-device-width: 640px) {
            #dialoguons {
                width: 40%;
            }

            .playVideoButton {
                width: 50px !important;
                height: 50px !important;
            }
        }

        /* For iPhone 4 Portrait or Landscape View */
        @media screen and (min-device-width: 320px)
        and (-webkit-min-device-pixel-ratio: 2) {
            .d-flex .flex-md-row .flex-sm-column {
                flex-direction: column;
            }

            #dialoguons {
                width: 60%;
            }

            .playVideoButton {
                width: 50px !important;
                height: 50px !important;
            }
        }

        /* For iPhone 5 Portrait or Landscape View */
        @media (device-height: 568px)
        and (device-width: 320px)
        and (-webkit-min-device-pixel-ratio: 2) {
            #dialoguons {
                width: 70%;
            }

            .playVideoButton {
                width: 50px !important;
                height: 50px !important;
            }
        }

        /* For iPhone 6 and 6 plus Portrait or Landscape View */
        @media (min-device-height: 667px)
        and (min-device-width: 375px)
        and (-webkit-min-device-pixel-ratio: 3) {
            #dialoguons {
                width: 60%;
            }

            .playVideoButton {
                width: 50px !important;
                height: 50px !important;
            }
        }

    </style>
{% endblock %}

{% block header %}
    {{ parent() }}
{% endblock %}

{% block navigation %}{% endblock %}

{% block body %}
    <!--Main Layout-->
    <main class="">
        <div class="container">
            <div class="vertical-center">
                {% include 'menuProfile.html.twig' %}
                {#<h1 class="col-md-12 d-flex justify-content-center justify-content-md-start justify-content-sm-center mx-auto page-title mb-3">MES ABONNEMENTS</h1>#}
                {% for label, messages in app.flashes %}
                    {% if label == 'paiement_reccurent_abonnement' and messages[0] == true %}
                        <div class="alert alert-success" role="alert">
                            Félicitations, vous vous êtes abonné à Trust&Market.
                        </div>
                    {% endif %}
                    {% if label == 'paiement_reccurent_abonnement' and messages[0] == false %}
                        <div class="alert alert-danger" role="alert">
                            Une erreur s'est produite lors du paiement, veuillez reessayer.
                        </div>
                    {% endif %}
                {% endfor %}
                <div class="col-md-12 border border-primary abbo-bloc mt-5">
                    <h2>Mon offre: <a
                                href="{{ path('marketing_details_promo_com',{slug:'details-des-fonctionnalites-des-abonnements'}) }}"
                                target="_blank">{% if abonnements %}{{ abonnements|first.getOffre().titre }}{% endif %}</a>
                    </h2>
                    <span>Votre offre est renouvelée tous les mois. </span><br>
                    <button class="btn btn-abbo btn-sm"><a class="" href="{{ path('app_souscription') }}">CHANGER
                            D'OFFRE</a></button>
                </div>
                <div class="d-flex justify-content-center justify-content-md-center justify-content-sm-center flex-md-row flex-sm-column flex-column">
                    <div class="col-md-6 border border-primary abbo-bloc">
                        <h3>Informations de facturation</h3>
                        <form method="post" action="{{ path('app_abonnement_facturation_update') }}"
                              id="updateFacturation">
                            <input hidden name="id" id="id"
                                   value="{% if user.getInformationsFacturationUtilisateur() %}{{ user.getInformationsFacturationUtilisateur().getId() }}{% endif %}">
                            <div class="mb-3">
                                <label for="nom_societe" class="form-label">Nom ou Société *</label>
                                <input required type="text"
                                       value="{% if user.getInformationsFacturationUtilisateur() %}{{ user.getInformationsFacturationUtilisateur().getNomOuSociete() }}{% endif %}"
                                       class="form-control" id="nom_societe" name="nom_societe"
                                       aria-describedby="emailHelp">
                            </div>
                            <div class="mb-3">
                                <label for="adresse" class="form-label">Adresse *</label>
                                <input required type="text"
                                       value="{% if user.getInformationsFacturationUtilisateur() %}{{ user.getInformationsFacturationUtilisateur().getAdresse() }}{% endif %}"
                                       class="form-control" id="adresse" name="adresse">
                            </div>
                            <div class="row">
                                <div class="mb-3 col-md-4">
                                    <label for="adresse" class="form-label">Ville *</label>
                                    <input required type="text"
                                           value="{% if user.getInformationsFacturationUtilisateur() %}{{ user.getInformationsFacturationUtilisateur().getVille() }}{% endif %}"
                                           class="form-control" id="ville" name="ville">
                                </div>

                                <div class="mb-3 col-md-4">
                                    <label for="code_postal" class="form-label">Code postal *</label>
                                    <input required type="text"
                                           value="{% if user.getInformationsFacturationUtilisateur() %}{{ user.getInformationsFacturationUtilisateur().getCodePostal() }}{% endif %}"
                                           class="form-control" id="code_postal" name="code_postal">
                                </div>

                                <div class="mb-3 col-md-4">
                                    <label for="pays" class="form-label">Pays *</label>
                                    <select required id="pays" name="pays" class="form-control">
                                        {% if user.getInformationsFacturationUtilisateur() %}
                                            <option
                                            value="{{ user.getInformationsFacturationUtilisateur().getPays() }}">{{ user.getInformationsFacturationUtilisateur().getPays()|country_name }}</option>{% endif %}
                                        {% include 'countryRegister.html.twig' %}
                                    </select>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="numero_tva" class="form-label">Numéro TVA</label>
                                <input value="{% if user.getInformationsFacturationUtilisateur() %}{{ user.getInformationsFacturationUtilisateur().getNumeroTva() }}{% endif %}"
                                       type="text" class="form-control" id="numero_tva" name="numero_tva">
                            </div>
                            <button type="submit" class="btn btn-abbo btn-sm">ENREGISTRER</button>
                        </form>
                    </div>

                    <div class="col-md-6 border border-primary abbo-bloc table-responsive">
                        <h3>Mes factures</h3>
                        <table class="table">
                            <thead>
                            <tr class="table-success-perso">
                                <th scope="col">Date</th>
                                <th scope="col" class="text-center">Numero</th>
                                <th scope="col" class="text-center">Prix</th>
                                <th scope="col" class="text-center">Pdf</th>
                            </tr>
                            </thead>
                            <tbody>
                            {% for abonnement in abonnements %}
                                <tr>
                                    <td class="align-middle">{{ abonnement.createdAt|date("d/m/Y h:i") }}</td>
                                    <td class="text-center align-middle">{{ abonnement.createdAt|date("U") }}</td>
                                    <td class="text-center align-middle">{{ abonnement.getTarif() }} EUR</td>
                                    {% if abonnement.getOffre().getTitre()|lower != 'gratuit' %}
                                        <td>
                                            <a href="{{ path('app_abonnement_facture', {abonnement: abonnement.getId()}) }}"
                                               target="_blank">
                                                <button type="button" class="btn rounded btn-outline-primary p-2"><i
                                                            class="fa fa-download"></i></button>
                                            </a></td>
                                    {% endif %}
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                        {{ pagerfanta(abonnements) }}
                    </div>
                </div>
                <div class="col-md-6 border border-primary abbo-bloc">
                    {% include("abonnement/Partials/moyenPaiement.html.twig") %}
                </div>
            </div>

        </div>
    </main>
    <!--Main Layout-->

    {% include("partials/project.html.twig") %}
    {% include("partials/otherPagesVideoModal.html.twig") %}
{% endblock %}


{% block footer %}
    {{ parent() }}

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('toastr/toastr.min.js') }}"></script>
    <script src="{{ asset('assets/js/card-js.min.js') }}"></script>
    <script>
        $(document).ready(function () {// Sélectionner le bouton "SAISIR"
            const saisirBtn = document.querySelector('.saisir');

            //Sélectionner le bouton "ENREGISTRER"
            const saveBtn = document.querySelector('.save');

            //Sélectionner le bouton "updateBtn"
            const updateBtn = document.querySelector('.mise-a-jour');

            //Sélectionner la div contenant la carte
            const cardBloc = document.querySelector('.card-edit-bloc');

            const bankCart = document.querySelector('#card-number');
            // Ajouter un écouteur d'événements au clic sur le bouton "SAISIR"
            saisirBtn.addEventListener('click', () => {
                cardBloc.classList.toggle('d-none');
                saveBtn.classList.toggle('d-none');
                saisirBtn.classList.add('d-none');

                let secureSpan = document.querySelector('.secure-message');
                if (!secureSpan) {
                    secureSpan = document.createElement('span');
                    secureSpan.className = 'secure-message small'; // Bootstrap classes for red text and small font
                    document.querySelector('.card-number-wrapper').appendChild(secureSpan);
                    secureSpan.textContent = 'Les paiements sont sécurisés avec Stripe';
                    secureSpan.style.display = 'block';
                }
            });

            bankCart.addEventListener('blur', () => {
                console.log('modification de la carte bancaire');
                validateCardFields();
            });

            //Sélectionner la carte

            const cardViewBloc = document.querySelector('.card-view-bloc');
            // Ajouter un écouteur d'événements au clic sur le bouton "updateBtn"
            updateBtn.addEventListener('click', () => {
                cardBloc.classList.toggle('d-none');
                saveBtn.classList.toggle('d-none');
                saisirBtn.classList.add('d-none');
                document.querySelector('.card-view-bloc').classList.toggle('d-none');

                let secureSpan = document.querySelector('.secure-message');
                if (!secureSpan) {
                    secureSpan = document.createElement('span');
                    secureSpan.className = 'secure-message small'; // Bootstrap classes for red text and small font
                    document.querySelector('.card-number-wrapper').appendChild(secureSpan);
                    secureSpan.textContent = 'Les paiements sont sécurisés avec Stripe';
                    secureSpan.style.display = 'block';
                }
            });

            function validateCardFields() {
                let myCard = $('#my-card');
                let validateResponse = cardFormatValidation(myCard.CardJs('cardNumber').replace(/\s/g, ''));

                if (validateResponse.response === true && myCard.CardJs('cardType').length > 0) {
                    const cardType = myCard.CardJs('cardType').toLowerCase();
                    const allowedCardTypes = ['cb', 'visa', 'mastercard'];

                    if (!allowedCardTypes.includes(cardType)) {
                        validateResponse.response = false;
                        validateResponse.message = 'Ce type de carte n’est pas géré. Veuillez saisir une carte Visa ou Mastercard.';
                    }
                }
                const fields = [
                    {
                        element: document.querySelector('.card-number-wrapper'),
                        value: myCard.CardJs('cardNumber'),
                        validation: () => validateResponse.response,
                        errorMessage: validateResponse.message
                    },
                ];

                let isValid = true;
                for (const field of fields) {
                    const hasError = !field.validation ? (field.value?.length === 0) : !field.validation();
                    field.element.classList.toggle("has-error", hasError);

                    let errorSpan = field.element.querySelector('.error-message');
                    if (!errorSpan) {
                        errorSpan = document.createElement('span');
                        errorSpan.className = 'error-message text-danger small'; // Bootstrap classes for red text and small font
                        field.element.appendChild(errorSpan);
                    }
                    errorSpan.textContent = hasError ? field.errorMessage : '';
                    errorSpan.style.display = hasError ? 'block' : 'none';

                    isValid = isValid && !hasError;
                }
                return isValid;
            }

            const validateFields = () => {
                let myCard = $('#my-card');
                let validateResponse = cardFormatValidation(myCard.CardJs('cardNumber').replace(/\s/g, ''));
                if (validateResponse.response === true && myCard.CardJs('cardType').length > 0) {
                    const cardType = myCard.CardJs('cardType').toLowerCase();
                    const allowedCardTypes = ['cb', 'visa', 'mastercard'];

                    if (!allowedCardTypes.includes(cardType)) {
                        validateResponse.response = false;
                        validateResponse.message = 'Ce type de carte n’est pas géré. Veuillez saisir une carte Visa ou Mastercard.';
                    }
                }
                const fields = [
                    {
                        element: document.querySelector('.card-number-wrapper'),
                        value: myCard.CardJs('cardNumber'),
                        validation: () => validateResponse.response,
                        errorMessage: validateResponse.message
                    },
                    {
                        element: document.querySelector('.cvc-wrapper'),
                        value: myCard.CardJs('cvc'),
                        validation: () => myCard.CardJs('cvc').length > 0,
                        errorMessage: 'CVC invalide'
                    },
                    {
                        element: document.querySelector('.expiry').parentElement,
                        validation: () => CardJs.isExpiryValid(myCard.CardJs('expiryMonth'), myCard.CardJs('expiryYear')),
                        errorMessage: 'La date d\'expiration est invalide'
                    }
                ];

                let isValid = true;
                for (const field of fields) {
                    const hasError = !field.validation ? (field.value?.length === 0) : !field.validation();
                    field.element.classList.toggle("has-error", hasError);

                    let errorSpan = field.element.querySelector('.error-message');
                    if (!errorSpan) {
                        errorSpan = document.createElement('span');
                        errorSpan.className = 'error-message text-danger small'; // Bootstrap classes for red text and small font
                        field.element.appendChild(errorSpan);
                    }
                    errorSpan.textContent = hasError ? field.errorMessage : '';
                    errorSpan.style.display = hasError ? 'block' : 'none';

                    isValid = isValid && !hasError;
                }
                return isValid;
            };

            function formatMonthNumber(number) {
                // Check if the number is within the range (1 to 12)
                if (number < 1 || number > 12) {
                    throw new Error("Number must be between 1 and 12");
                }

                // Convert the number to a string
                const numberString = number.toString();

                // Add leading zero for numbers 1 to 9
                return numberString.length === 1 ? "0" + numberString : numberString;
            }

            function cardFormatValidation(number) {
                let response = {};
                console.log(number);
                console.log(luhnCheck(number));
                //Check if the number contains only numeric value
                //and is of between 13 to 19 digits
                const regex = new RegExp("^[0-9]{14,16}$");
                if (!regex.test(number)) {
                    response = {
                        response: false,
                        message: 'Votre numero de carte est incomplet'
                    }
                    return response;
                }
                if (luhnCheck(number)) {
                    response = {
                        response: true,
                        message: ''
                    };
                } else {
                    response = {
                        response: false,
                        message: 'Le numéro de carte saisi est invalide. Veuillez corriger votre saisie.'
                    };
                }
                console.log(response);
                return response;
            }

            function luhnCheck(val) {
                let checksum = 0; // running checksum total
                let j = 1; // takes value of 1 or 2
                // Process each digit one by one starting from the last
                for (let i = val.length - 1; i >= 0; i--) {
                    let calc = 0;
                    // Extract the next digit and multiply by 1 or 2 on alternative digits.
                    calc = Number(val.charAt(i)) * j;
                    // If the result is in two digits add 1 to the checksum total
                    if (calc > 9) {
                        checksum = checksum + 1;
                        calc = calc - 10;
                    }
                    // Add the units element to the checksum total
                    checksum = checksum + calc;
                    // Switch the value of j
                    if (j == 1) {
                        j = 2;
                    } else {
                        j = 1;
                    }
                }
                //Check if it is divisible by 10 or not.
                return (checksum % 10) == 0;
            }

            saveBtn.addEventListener('click', (e) => {
                e.preventDefault();
                if (validateFields()) {
                    let myCard = $('#my-card');
                    //Create card
                    const url = "/fr/abonnement/create_card";
                    const expiryMonth = formatMonthNumber(myCard.CardJs('expiryMonth'));
                    const formData = {
                        //cvc: myCard.CardJs('cvc'),
                        //cardNumber: myCard.CardJs('cardNumber'),
                        cardType: myCard.CardJs('cardType'),
                        expirationDate: expiryMonth.concat('', myCard.CardJs('expiryYear')),
                        alias: myCard.CardJs('cardNumber').slice(-4)
                        //expiryMonth: myCard.CardJs('expiryMonth'),
                        //expiryYear: myCard.CardJs('expiryYear'),
                        //name: myCard.CardJs('name')
                    }
                    console.log(formData);

                    toastr.info("Traitement en cours");
                    fetch(url, {
                        method: 'POST',
                        credentials: 'same-origin', // Include for sending cookies/session data
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData) // Stringify form data for POST request
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json(); // Parse JSON response
                        })
                        .then(data => {
                            console.log(data);
                            if (data.status === 200 && data.result.Status === 'CREATED' && isValidUrl(data.result.CardRegistrationURL)) {
                                // Proceed with actions that require a valid CardRegistrationURL
                                console.log('Card registration URL is valid:', data.result.CardRegistrationURL);
                                //Encrypter les donnees

                                let request = {
                                    accessKeyRef: data.result.AccessKey,
                                    data: data.result.PreregistrationData,
                                    cardNumber: myCard.CardJs('cardNumber').replace(/\s/g, ''),
                                    cardExpirationDate: expiryMonth.concat('', myCard.CardJs('expiryYear')),
                                    cardCvx: myCard.CardJs('cvc')
                                };

                                // Build the URL-encoded form data
                                $.ajax({
                                    url: data.result.CardRegistrationURL,
                                    type: "POST", // Adjust to your desired method (POST, GET, etc.)
                                    contentType: "application/x-www-form-urlencoded",
                                    data: request, // Send the request object directly
                                    success: function (response) {
                                        console.log(response);

                                        if (response === "errorCode=02625") {
                                            toastr.clear();
                                            toastr.error("Le format de la carte bancaire est invalide");
                                            throw new Error("Le format de la carte bancaire est invalide");
                                        } else if (response === "errorCode=02626") {
                                            toastr.clear();
                                            toastr.error("La date d'expiration est invalide");
                                            throw new Error("La date d'expiration est invalide");
                                        } else if (response === "errorCode=02627") {
                                            toastr.clear();
                                            toastr.error("Le CVV est invalide");
                                            throw new Error("Le CVV est invalide");
                                        } else if (response.includes('data=')) {
                                            const req = {
                                                data: response,
                                                expirationDate: expiryMonth.concat('', myCard.CardJs('expiryYear')),
                                                alias: myCard.CardJs('cardNumber').slice(-4)
                                            };
                                            console.log(req);
                                            // Mise a jour de la carte encodee sur mangopay
                                            $.ajax({
                                                url: "/fr/abonnement/update_card",
                                                type: "POST", // Adjust to your desired method (GET, PUT, DELETE, etc.)
                                                contentType: "application/json", // Set content type for JSON data
                                                data: JSON.stringify(req), // Send the request object directly
                                                success: function (response) {
                                                    console.log(response);
                                                    toastr.clear();
                                                    toastr.success("Carte de paiement enregistrée avec succès");
                                                    setTimeout(function () {
                                                        window.location = '';
                                                    }, 1000);
                                                },
                                                error: function (error) {
                                                    console.error("Error:", error);
                                                    toastr.clear();
                                                    toastr.error("{{ 'general.error'|trans }}");
                                                }
                                            });
                                        } else {
                                            toastr.clear();
                                            toastr.error("{{ 'general.error'|trans }}");
                                        }
                                    },
                                    error: function (error) {
                                        console.error("Error:", error);
                                        toastr.clear();
                                        toastr.error("{{ 'general.error'|trans }}");
                                    }
                                });
                            } else if (data.status === 500) {
                                console.error("Error:", data.error);
                                toastr.clear();
                                toastr.error("{{ 'general.error'|trans }}");
                            } else {
                                console.error('Invalid CardRegistrationURL or status is not CREATED.');
                                // Handle the error case (e.g., display an error message, retry, etc.)
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            toastr.error("{{ 'general.error'|trans }}");
                        })
                }
            });

            function isValidUrl(url) {
                try {
                    // Create a new URL object with the provided value
                    let test = new URL(url);
                    console.log(test);
                    return true;
                } catch (error) {
                    return false;
                }
            }

            $('#updateFacturation').on('submit', function (e) {
                e.preventDefault();
                toastr.info("{{ 'systeme.requetes.requete-en-cours'|trans }}");

                const $form = this;
                const formData = new FormData($form); // Use FormData directly

                fetch($form.action, {
                    method: $form.method,
                    credentials: 'same-origin', // Include for sending cookies/session data
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log(data);
                        if (data.result) {
                            toastr.clear();
                            toastr.success("{{ 'systeme.requetes.succes'|trans }}");
                            window.location = "";
                        } else {
                            $('#send').classList.remove('running');
                            toastr.clear();
                            toastr.error("{{ 'systeme.requetes.erreur'|trans }}");
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        $('#send').classList.remove('running');
                        toastr.clear();
                        toastr.error("{{ 'general.error'|trans }}");
                    })
                    .finally(() => {
                        // Optional: Perform actions after request completes (regardless of success/error)
                    });

                return false;
            });

        });
    </script>


{% endblock %}
